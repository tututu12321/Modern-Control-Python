import numpy as np
from scipy.linalg import solve_continuous_are
from scipy.signal import StateSpace, lsim, bode
import matplotlib.pyplot as plt

# システム行列の定義
A = np.array([[0, 1], [-1, -1]])  # 2次の線形システム
B = np.array([[0], [1]])
C = np.array([[1, 0]])
D = np.array([[0]])

# LQRの重み行列の設定
Q = np.array([[1, 0], [0, 1]])  # 状態の重み行列（Qが大きいほど状態の収束を重視）
R = np.array([[1]])             # 入力の重み行列（Rが大きいほど入力エネルギーを抑制）

# Riccati方程式を解いて最適ゲイン K を計算
P = solve_continuous_are(A, B, Q, R)
K = np.linalg.inv(R) @ B.T @ P
print("最適フィードバックゲイン K:", K)

# フィードバックゲインを適用した閉ループシステムの行列
A_cl = A - B @ K
closed_loop_system = StateSpace(A_cl, B, C, D)

# 初期状態とシミュレーション設定
x0 = [1, 0]                    # 初期状態
t = np.linspace(0, 10, 500)    # シミュレーション時間
u = np.zeros_like(t)           # 入力を0に設定（自由応答）

# システム応答の計算
_, y, x = lsim(closed_loop_system, U=u, T=t, X0=x0)

# 操作量 u(t) の計算
u_t = -K @ x.T  # u(t) = -K * x(t)

# 評価関数 J の計算
J_x = np.trapz(x[:, 0]**2 + x[:, 1]**2, t)  # ∫ (x1^2 + x2^2) dt
J_u = np.trapz(u_t[0]**2, t)                # ∫ u(t)^2 dt
J_total = J_x + J_u
print(f"評価関数 J の値: {J_total:.2f}")

# 結果のプロット
plt.figure(figsize=(12, 8))

# 状態 x1(t) のプロット
plt.subplot(3, 1, 1)
plt.plot(t, x[:, 0], label="x1(t) - Position")
plt.xlabel("Time (s)")
plt.ylabel("x1(t)")
plt.title("State x1(t) - Position")
plt.grid()

# 状態 x2(t) のプロット
plt.subplot(3, 1, 2)
plt.plot(t, x[:, 1], label="x2(t) - Velocity")
plt.xlabel("Time (s)")
plt.ylabel("x2(t)")
plt.title("State x2(t) - Velocity")
plt.grid()

# 操作量 u(t) のプロット
plt.subplot(3, 1, 3)
plt.plot(t, u_t[0], label="Control Input u(t)", color="red")
plt.xlabel("Time (s)")
plt.ylabel("u(t)")
plt.title("Control Input u(t)")
plt.grid()

plt.tight_layout()
plt.show()

# ボード線図のプロットで安定性の確認
w, mag, phase = bode(closed_loop_system)
plt.figure()
plt.subplot(2, 1, 1)
plt.semilogx(w, mag)  # 振幅特性
plt.title('Bode Plot of the Closed-Loop System')
plt.ylabel('Magnitude (dB)')
plt.grid()

plt.subplot(2, 1, 2)
plt.semilogx(w, phase)  # 位相特性
plt.xlabel('Frequency (rad/s)')
plt.ylabel('Phase (degrees)')
plt.grid()
plt.show()
