import numpy as np
from scipy.linalg import solve_continuous_are
from scipy.signal import StateSpace, lsim
import matplotlib.pyplot as plt

# Define the system matrices A and B
A = np.array([[0, -1], [1, -2]])
B = np.array([[0], [1]])

# Define weighting matrices Q and R for the LQR problem
Q = np.array([[10, 0], [0, 1]])  # State weighting matrix
R = np.array([[1]])              # Control weighting matrix

# Solve the continuous-time Algebraic Riccati Equation (ARE) for matrix P
P = solve_continuous_are(A, B, Q, R)
print("Solution to the Riccati Equation, P:\n", P)

# Calculate the optimal feedback gain matrix K
K = np.linalg.inv(R) @ B.T @ P
print("Optimal Feedback Gain, K:", K)

# Manual verification: Check if ATP + PA - PBR^(-1)BTP + Q = 0
AT_P = A.T @ P
P_A = P @ A
P_B = P @ B
B_T_P = B.T @ P
BR_inv_B_T_P = B @ np.linalg.inv(R) @ B_T_P
riccati_check = AT_P + P_A - BR_inv_B_T_P + Q

print("Riccati Equation Check (Should be close to zero matrix):\n", riccati_check)

# Check if the solution P is positive definite by inspecting its eigenvalues
P_eigenvalues = np.linalg.eigvals(P)
print("Eigenvalues of P (should all be positive for P to be positive definite):\n", P_eigenvalues)

# Closed-loop system simulation
A_cl = A - B @ K  # Closed-loop system matrix
system_cl = StateSpace(A_cl, B, np.eye(2), np.zeros((2, 1)))

# Initial state and time vector for simulation
x0 = np.array([1, 0])  # Initial condition
t = np.linspace(0, 5, 500)
U = np.zeros_like(t)  # Zero input signal

# Simulate the system response with zero input (free response)
_, y, x = lsim(system_cl, U=U, T=t, X0=x0)

# Plotting the system response
plt.figure(figsize=(10, 5))
plt.plot(t, x[:, 0], label="State x1")
plt.plot(t, x[:, 1], label="State x2")
plt.xlabel("Time (s)")
plt.ylabel("State values")
plt.title("Closed-Loop System Response")
plt.legend()
plt.grid()
plt.show()
